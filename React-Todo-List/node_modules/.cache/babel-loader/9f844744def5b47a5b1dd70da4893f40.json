{"ast":null,"code":"import _defineProperty from \"/Users/dallinbs/dev/random/randomproj/React-Todo-List/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport update from 'immutability-helper';\n/**\n * Get the list of todo items.\n * @return {Array}\n */\n\nexport function getAll() {\n  return [{\n    id: 1,\n    text: 'Learn Javascript',\n    completed: false,\n    status: 'none'\n  }, {\n    id: 2,\n    text: 'Learn React',\n    completed: false,\n    status: 'none'\n  }, {\n    id: 3,\n    text: 'Build a React App',\n    completed: false\n  }];\n}\nexport function getItemById(itemId) {\n  return getAll().find(function (item) {\n    return item.id === itemId;\n  });\n}\nexport function updateStatus(items, itemId, completed) {\n  var index = items.findIndex(function (item) {\n    return item.id === itemId;\n  }); // Returns a new list of data with updated item.\n\n  return update(items, _defineProperty({}, index, {\n    completed: {\n      $set: completed\n    }\n  }));\n}\n/**\n * A counter to generate a unique id for a todo item.\n * Can remove this logic when the todo is created using backend/database logic.\n * @type {Number}\n */\n\nvar todoCounter = 1;\n\nfunction getNextId() {\n  return getAll().length + todoCounter++;\n}\n/**\n * Adds a new item on the list and returns the new updated list (immutable).\n *\n * @param {Array} list\n * @param {Object} data\n * @return {Array}\n */\n\n\nexport function addToList(list, data) {\n  var item = Object.assign({\n    id: getNextId()\n  }, data);\n  return list.concat([item]);\n}","map":{"version":3,"sources":["/Users/dallinbs/dev/random/randomproj/React-Todo-List/src/services/todo.js"],"names":["update","getAll","id","text","completed","status","getItemById","itemId","find","item","updateStatus","items","index","findIndex","$set","todoCounter","getNextId","length","addToList","list","data","Object","assign","concat"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,qBAAnB;AAEA;;;;;AAIA,OAAO,SAASC,MAAT,GAAkB;AACrB,SAAO,CACH;AACIC,IAAAA,EAAE,EAAE,CADR;AAEIC,IAAAA,IAAI,EAAE,kBAFV;AAGIC,IAAAA,SAAS,EAAE,KAHf;AAIIC,IAAAA,MAAM,EAAE;AAJZ,GADG,EAOH;AACIH,IAAAA,EAAE,EAAE,CADR;AAEIC,IAAAA,IAAI,EAAE,aAFV;AAGIC,IAAAA,SAAS,EAAE,KAHf;AAIIC,IAAAA,MAAM,EAAE;AAJZ,GAPG,EAaH;AACIH,IAAAA,EAAE,EAAE,CADR;AAEIC,IAAAA,IAAI,EAAE,mBAFV;AAGIC,IAAAA,SAAS,EAAE;AAHf,GAbG,CAAP;AAoBH;AAED,OAAO,SAASE,WAAT,CAAqBC,MAArB,EAA6B;AAChC,SAAON,MAAM,GAAGO,IAAT,CAAc,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACP,EAAL,KAAYK,MAAhB;AAAA,GAAlB,CAAP;AACH;AAED,OAAO,SAASG,YAAT,CAAsBC,KAAtB,EAA6BJ,MAA7B,EAAqCH,SAArC,EAAgD;AACnD,MAAIQ,KAAK,GAAGD,KAAK,CAACE,SAAN,CAAgB,UAAAJ,IAAI;AAAA,WAAIA,IAAI,CAACP,EAAL,KAAYK,MAAhB;AAAA,GAApB,CAAZ,CADmD,CAGnD;;AACA,SAAOP,MAAM,CAACW,KAAD,sBACRC,KADQ,EACA;AACLR,IAAAA,SAAS,EAAE;AAACU,MAAAA,IAAI,EAAEV;AAAP;AADN,GADA,EAAb;AAKH;AAED;;;;;;AAKA,IAAIW,WAAW,GAAG,CAAlB;;AAEA,SAASC,SAAT,GAAqB;AACjB,SAAOf,MAAM,GAAGgB,MAAT,GAAkBF,WAAW,EAApC;AACH;AAED;;;;;;;;;AAOA,OAAO,SAASG,SAAT,CAAmBC,IAAnB,EAAyBC,IAAzB,EAA+B;AAClC,MAAIX,IAAI,GAAGY,MAAM,CAACC,MAAP,CAAc;AACrBpB,IAAAA,EAAE,EAAEc,SAAS;AADQ,GAAd,EAERI,IAFQ,CAAX;AAIA,SAAOD,IAAI,CAACI,MAAL,CAAY,CAACd,IAAD,CAAZ,CAAP;AACH","sourcesContent":["import update from 'immutability-helper';\n\n/**\n * Get the list of todo items.\n * @return {Array}\n */\nexport function getAll() {\n    return [\n        {\n            id: 1,\n            text: 'Learn Javascript',\n            completed: false,\n            status: 'none'\n        },\n        {\n            id: 2,\n            text: 'Learn React',\n            completed: false,\n            status: 'none'\n        },\n        {\n            id: 3,\n            text: 'Build a React App',\n            completed: false\n            \n        }\n    ]\n}\n\nexport function getItemById(itemId) {\n    return getAll().find(item => item.id === itemId);\n}\n\nexport function updateStatus(items, itemId, completed) {\n    let index = items.findIndex(item => item.id === itemId);\n\n    // Returns a new list of data with updated item.\n    return update(items, {\n        [index]: {\n            completed: {$set: completed}\n        }\n    });\n}\n\n/**\n * A counter to generate a unique id for a todo item.\n * Can remove this logic when the todo is created using backend/database logic.\n * @type {Number}\n */\nlet todoCounter = 1;\n\nfunction getNextId() {\n    return getAll().length + todoCounter++;\n}\n\n/**\n * Adds a new item on the list and returns the new updated list (immutable).\n *\n * @param {Array} list\n * @param {Object} data\n * @return {Array}\n */\nexport function addToList(list, data) {\n    let item = Object.assign({\n        id: getNextId()\n    }, data);\n\n    return list.concat([item]);\n}\n"]},"metadata":{},"sourceType":"module"}